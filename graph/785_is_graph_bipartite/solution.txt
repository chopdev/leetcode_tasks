/*
4 December 2020

Questions:
1) can graph have a self-loop?
2) can it be invalid?  like this [[1],[]]
3) can we have not connected nodes?

Idea:
Basically we can divide nodes on 2 groups, A and B. We can do dfs and mark the group in which this node is. 

Time complexity: 
N - number of vertices
N - number of edges
O(N*M + N) - to create adjacency list graph
O(N+M) - for dfs, as we remember visited nodes

O(N*M + N + M) = O(N*M)

Space: O(2N) = O(N)

*/

class Node {
    int value;
    Map<Integer, Node> adj; // adjacency list
    boolean groupA;

    public Node(int val) {
        value = val;
        adj = new HashMap<>();
    }
    
    @Override
    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        
        if(!(other instanceof Node)) {
            return false;
        }
        
        Node n = (Node)other;
        return n.value == this.value;
    }
    
    @Override
    public int hashCode() {
        return value * 17;
    }
}

public boolean isBipartite(int[][] graph) {
    Map<Integer, Node> nodes = createAdjGraph(graph);
    Set<Node> visited = new HashSet<>();
    for (int i = 0; i<graph.length; i++) {
        if(!isBipartiteDfs(nodes.get(i), visited, nodes.get(i).groupA)) {
            return false;
        }
    }

    return true;
}

private Map<Integer, Node> createAdjGraph(int[][] graph) {
    Map<Integer, Node> nodes = new HashMap<>();
    for (int i = 0; i< graph.length; i++) {
        nodes.put(i, new Node(i));
    }

    for (int i = 0; i< graph.length; i++) {
        for (int j=0; j<graph[i].length; j++) {
            nodes.get(i).adj.put(graph[i][j], nodes.get(graph[i][j]));
        }
    }
    return nodes;
}

private boolean isBipartiteDfs(Node node, Set<Node> visited, boolean groupA) {
    if (visited.contains(node)) {
        return node.groupA == groupA;
    }

    node.groupA = groupA;
    visited.add(node);
    for (Node next : node.adj.values()) {
        if(!isBipartiteDfs(next, visited, !groupA)) {
            return false;
        }
    }

    return true;
}



/*
Nice O(N+M) solution
https://leetcode.com/problems/is-graph-bipartite/discuss/115487/Java-Clean-DFS-solution-with-Explanation
*/