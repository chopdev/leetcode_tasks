/*
1492. The kth Factor of n
Medium
https://leetcode.com/problems/the-kth-factor-of-n/

The kth Factor of n

Given two positive integers n and k.
A factor of an integer n is defined as an integer i where n % i == 0.
Consider a list of all factors of n sorted in ascending order, return the kth factor in this list or return -1 if n has less than k factors.

 
Example 1:

Input: n = 12, k = 3
Output: 3
Explanation: Factors list is [1, 2, 3, 4, 6, 12], the 3rd factor is 3.
Example 2:

Input: n = 7, k = 2
Output: 7
Explanation: Factors list is [1, 7], the 2nd factor is 7.
Example 3:

Input: n = 4, k = 4
Output: -1
Explanation: Factors list is [1, 2, 4], there is only 3 factors. We should return -1.
Example 4:

Input: n = 1, k = 1
Output: 1
Explanation: Factors list is [1], the 1st factor is 1.
Example 5:

Input: n = 1000, k = 3
Output: 4
Explanation: Factors list is [1, 2, 4, 5, 8, 10, 20, 25, 40, 50, 100, 125, 200, 250, 500, 1000].
 

Constraints:

1 <= k <= n <= 1000
*/


class Solution {
    // My O(N) solution
     public int kthFactor(int n, int k) {
        int count = 1;
        int value = 1;
        for (int i = 2; i <= n; i++) {
            if (count == k) {
                return value;
            }
            if (n%i == 0) {
                value = i;
                count ++;
            }
        }
        
        return count == k ? value : -1;
    }

    // My not working O(sqrt(N))
    public int kthFactor2222(int n, int k) {
        List<Pair<Integer,Integer>> pairs = new ArrayList<>();
        pairs.add(new Pair<>(1, n));
        for (int i = 2; i <= Math.sqrt(n); i++) {
            if (n%i == 0) {
                pairs.add(new Pair<>(i, n/i));
            }
            if (pairs.size() == k) {
                return pairs.get(pairs.size() - 1).getKey();
            }
        }

        int hasRoot = Math.sqrt(n) * Math.sqrt(n) == n;
        int fix = hasRoot ? -1 : 0;

        if (pairs.size() * 2 + fix < k) {
            return -1;
        }
        
        int value = pairs.get(2 * pairs.size() + fix - k).getValue(); 
        return value;
    }

    // not mine O(sqrt(N))
    //  List will cache factors bigger than sqrt(n)
    // https://leetcode.com/problems/the-kth-factor-of-n/discuss/708548/Java-simple-Loop-O(sqrt(n))
    public int kthFactor(int n, int k) {
        int cnt = 0;
        List<Integer> l = new ArrayList<>();
        for(int i = 1; i * i <= n; i++) {
            if (n % i == 0) {
                if (i * i != n) l.add(n / i);
                if (++cnt == k) return i;
            }
        }
        if (l.size() + cnt < k) return -1;
        return l.get(l.size() - (k - cnt));
    }
}